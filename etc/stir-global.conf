#!/bin/bash
#
# global.conf
#
# Global configuration file for stir

# This value indicates the version number when this file was last changed:
# it does not necessarily reflect stir's current version number.
# DO NOT EDIT THIS NUMBER OR YOU MAY BLOW SOMETHING UP
#
GLOBAL_VERSION="3.8.5.7"


###############################################################################
# General Setup
###############################################################################

# Set the work path. This is the directory where all your
# repos are stored, with no trailing slash
# WORK_PATH="{{WORK_PATH}}"

# Path to repository configuration files relative to its
# root directory, usually ./config
# CONFIG_DIR="{{CONFIG_DIR}}"

# Path to store backups of configuration files
# CONFIG_BACKUP="{{CONFIG_BACKUP}}"

# Check to see all servers defined (repo host, staging, production, etc) are
# returning a 200OK response
# CHECK_SERVER="{{CHECK_SERVER}}"

# Running stir as the root user can be dangerous so it is not allowed by
# default. Set to TRUE if you really must do this.
# ALLOW_ROOT="{{ALLOW_ROOT}}"

# When CHECK_ACTIVE="TRUE", running stir --automate (unattended mode) will 
# ensure files are scanned for changes made within the timeframe set in 
# ACTIVETME (in minutes) and if any changes are found, deployment will be 
# halted. This is to make absolutely sure no one has been mucking  about in the
# local repo files potentially causing a conflict. In most  environments it 
# will never be needed and is only here as a failsafe.
# CHECK_ACTIVE="{{CHECK_ACTIVE}}"
# CHECK_TIME="{{CHECK_TIME}}"


###############################################################################
# Git Configuration
###############################################################################

# The URL for your repository hosting, with no trailing slash. For example,
# if you use Github and your repo URL looks like https://github.com/EMRL/stir
# your REPO_HOST should be set to https://github.com/EMRL
# REPO_HOST="{{REPO_HOST}}"

# Activate "Smart Commits"; this feature tries to create automatic commit 
# messages by parsing the log files generated during Wordpress updates. Set to
# TRUE to activate. This must be activated to use the --automate switch.
# SMART_COMMIT="{{SMART_COMMIT}}"

# If dirty (yet to be committed) files exist in the repo, stir will normally
# not halt execution when running with the --automate flag. If you prefer to
# have the dirty files stashed and proceed with updates set the below value to
# TRUE. Files will be unstashed after the deployment is complete.
# STASH="{{STASH}}"

# Clean and compress repo before starting up
# GARBAGE="{{GARBAGE}}"


###############################################################################
# Wordpress
###############################################################################

# Wordfence check - Wordfence makes some crappy files that break certain
# commands because of permissions garbage. Setting this to TRUE will enable a
# check that stops deployment if evidence of these files is detected.
# WF_CHECK="{{WF_CHECK}}"

# Advanced Custom Fields Pro License
#
# Too many issues seem to crop up with the normal method of updating the
# Wordpress plugin ACF Pro. Including your license key below will enable
# upgrades to happen more reliably.
# ACF_KEY="{{ACF_KEY}}"
#
# If you need to lock your version of ACF for some reason, set the value
# below to TRUE; updating via composer will not respect this setting
# ACF_LOCK="{{ACF_LOCK}}"

# Gravityforms License
# GRAVITY_FORMS_LICENSE="{{GRAVITY_FORMS_LICENSE}}"

# Specify which plugins to activate in list format seperated by a space, 
# e.g. "gravityforms advanced-custom-fields-pro"
# ACTIVATE_PLUGINS="{{ACTIVATE_PLUGINS}}"


###############################################################################
# Email
###############################################################################

# If you wish to send notification emails using an SMTP server, set USE_SMTP 
# to TRUE and make sure ssmtp is properly installed and configured.
# USE_SMTP="{{USE_SMTP}}"

# Set the address the log_files will be sent from
# FROM="{{FROM}}"

# Email log subject line "- project name" is appended to this,
# creating a subject line such as "Project deployed - Project Name"
# SUBJECT="{{SUBJECT}}"

# When should email logs be sent? Set to TRUE to activate.
# EMAIL_ERROR="{{EMAIL_ERROR}}"
# EMAIL_SUCCESS="{{EMAIL_SUCCESS}}"
# EMAIL_QUIT="{{EMAIL_QUIT}}"

# If you want your emails to be sent "clean" (with no detailed logging) set
# this value to TRUE. Full logs will still be posted to web logs. Error emails
# will continue to contain full logs.
# SHORT_EMAIL="{{SHORT_EMAIL}}"

# Send HTML emails?
# EMAIL_HTML="{{EMAIL_HTML}}"

# If you're sending HTML emails, define which template you'd like to use. HTML
# templates are stored in separate folders in /etc/stir/html. The value used 
# below should be the folder name of your template.
# HTML_TEMPLATE="{{HTML_TEMPLATE}}"

# Integration Emails
# ------------------
# Set values for where you'd like to post commit messages to via email. You can
# use something like Zapier to re-post that to whatever service you like, or if
# your project tracker allows for input directly via email like ours does, you
# post directly. Some of these options will definitely need to be set in the
# project's .stir.sh, not in a master configuration.

# Email from domain. Whatever you're integrating with may need a different 
# From: address than that of the the machine you're actually deploying from.
# FROM_DOMAIN="{{FROM_DOMAIN}}"

# If you need to specify a user, other than your unix user name to be the in 
# the From: email, do it here. Otherwise Leave blank.
# FROM_USER="{{FROM_USER}}"

# Post commit logs to this email address. This should probably be set 
# per-project. For examples, for our task management system, this email would
# be task-####@projects.emrl.com, with the #### being the task identification
# number for the project being deployed.
# POST_EMAIL_HEAD="{{POST_EMAIL_HEAD}}"
# POST_EMAIL_TAIL="{{POST_EMAIL_TAIL}}"


###############################################################################
# Digest Emails
###############################################################################

# To include your website's RSS feed in your digest emails, set your feed's
# URL below.
# NEWS_URL="{{NEWS_URL}}"


###############################################################################
# Slack Notifications
###############################################################################

# You'll need to set up an "Incoming Webhook" custom integration on the Slack
# side to get this ready to roll.
# See https://YOURTEAMNAME.slack.com/apps/manage/custom-integrations to get
# going. Once your Slack webhook is setup, run
# 'stir --test-slack [project]' to test your configuration.
#
# Set POST_TO_SLACK to "TRUE" to enable Slack integration.
# POST_TO_SLACK="{{POST_TO_SLACK}}"

# Add your full Webhook URL below, including https://
# SLACK_URL="{{SLACK_URL}}"

# Normally only successful deployments are posted to Slack.
# Enable the settings below to post on WARNiNG and/or ERROR.
# SLACK_ERROR="{{SLACK_ERROR}}"


###############################################################################
# Webhooks
###############################################################################

# Webhook POST URL
# POST_URL="{{POST_URL}}"


###############################################################################
# Logging
###############################################################################

# Strips the bulk of nasty PHP debug messages out of the log files that are 
# emailed upon deployment.
# NO_PHP="{{NO_PHP}}"

# If you are not dbugging your stir install, you should probably set TERSE
# to "TRUE", which will keep your log files from including debug information.
# TERSE="{{TERSE}}"

# IF INCOGNITO is set to true, log files as well as verbose output to screen
# will be stripped of details such as email addresses and system file paths.
# INCOGNITO="{{INCOGNITO}}"

# Post HTML logs to remote server. This needs to be set to "TRUE" even you
# are only posting to LOCALHOST.
# REMOTE_LOG="{{REMOTE_LOG}}"

# Define the root url where the stir log will be accessible.
# REMOTE_URL="{{REMOTE_URL}}"

# If using HTML logs, define which template you'd like to use. HTML templates
# are stored in separate folders in /etc/stir/html. The value used below
# should be the folder name of your template.
# REMOTE_TEMPLATE="{{REMOTE_TEMPLATE}}"

# Post logs via SCP
# SCP_POST="{{SCP_POST}}"
# SCP_USER="{{SCP_USER}}"
# SCP_HOST="{{SCP_HOST}}"
# SCP_HOST_PATH="{{SCP_HOST_PATH}}"
# SCP_PORT="{{SCP_PORT}}"

# DANGER DANGER: If for some reason you absolutely can't use an SSH key you
# can create a plaintext file with only your password in it, and define its
# full path below.
# SCP_PASS="{{SCP_PASS}}"

# If you're posting logs to a place on the same machine you're deploying from,
# set POSTTOLOCALHOST to "TRUE" and define the path where you want to store
# the HTML logs.
# POST_TO_LOCAL_HOST="{{POST_TO_LOCAL_HOST}}"
# LOCAL_HOST_PATH="{{LOCAL_HOST_PATH}}"

# Set the number of days before logs should be deleted. Currently this only
# works for logs stored on localhost.
# EXPIRE_LOGS="{{EXPIRE_LOGS}}"


###############################################################################
# Invoice Ninja integration
###############################################################################

# Full url of your Invoice Ninja host, with no trailing slash
# IN_HOST="{{IN_HOST}}"

# API Token, created at https://yourinvoicehost.com/settings/api_tokens
# IN_TOKEN="{{IN_TOKEN}}"

# This is to work around the fact that Invoice Ninja's API uses the internal
# invoice number as opposed to the front-facing number. If your first invoice
# number is something other than "1", set that value below.
# IN_OFFSET="{{IN_OFFSET}}"


###############################################################################
# Dropbox integration
###############################################################################

# For functions that require Dropbox integration, define the variables below.
# Currently this is used for checking when your last backups were made using
# the Wordpress BackWPUp plugin, and feeding that data into the stats pages as
# well as the email digests

# Dropbox API token
# DB_API_TOKEN="{{DB_API_TOKEN}}"


###############################################################################
# Bugsnag integration
###############################################################################

# BUGSNAG_AUTH="{{BUGSNAG_AUTH}}"
